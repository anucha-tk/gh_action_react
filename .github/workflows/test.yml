name: Test Project
on: push
env:
  MONGODB_NAME: simple-db
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Get Code
        uses: actions/checkout@v4

      - name: Enable Corepack
        run: npm install -g corepack && corepack enable

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install

      - name: lint
        run: yarn lint

      # testing env you can remove
      - name: echo env
        run: |
          echo "Env workflow can see: ${{ env.MONGODB_NAME }}"
          echo "Env GITHUB_REPO_SECRET can see: ${{ secrets.REPO_SECRET}}"
          echo "Env GITHUB_TESTING_REPO_SECRET can't see: ${{ secrets.SIMPLE_SECRET }}"
          echo "Env GITHUB_TESTING_REPO_VAR can't see: ${{ var.SIMPLE_VAR }}"
  format:
    runs-on: ubuntu-latest
    steps:
      - name: Get Code
        uses: actions/checkout@v4

      - name: Enable Corepack
        run: npm install -g corepack && corepack enable

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install

      - name: format
        run: yarn format
  test:
    runs-on: ubuntu-latest
    environment: testing
    steps:
      - name: Get Code
        uses: actions/checkout@v3

      - name: Enable Corepack
        run: npm install -g corepack && corepack enable

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install

      - name: Check Unit Test
        run: yarn test

      # testing env you can remove
      - name: echo env
        run: |
          echo "Env workflow can see: ${{ env.MONGODB_NAME }}"
          echo "Env GITHUB_REPO_SECRET can see: ${{ secrets.REPO_SECRET}}"
          echo "Env GITHUB_TESTING_REPO_SECRET can see: ${{ secrets.SIMPLE_SECRET }}"
          echo "Env GITHUB_TESTING_REPO_VAR can see: ${{ vars.SIMPLE_VAR }}"
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      script-file: ${{ steps.publish.outputs.script-file}}
    steps:
      - name: Get Code
        uses: actions/checkout@v4

      - name: Enable Corepack
        run: npm install -g corepack && corepack enable

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install

      - name: Build website
        run: yarn build

      - name: publish JS filename
        id: publish
        run: |
          script_file=$(find dist/assets/*.js -type f)
          echo "script-file=$script_file" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: dist-files
          path: dist
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get artifact
        uses: actions/download-artifact@v3
        with:
          name: dist-files

      - name: Output contents
        run: ls

      - name: output filename
        run: echo "${{ needs.build.outputs.script-file }}"

      - name: Deploy
        run: echo "Deploy..."
